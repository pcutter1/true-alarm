/*
 * <!--
 *   Copyright 2020 Paul Cutter
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0>
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * -->
 */

package edu.cnm.deepdive.truealarm.model.entity;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.ForeignKey;
import androidx.room.PrimaryKey;


/**
 * The Alarm entity class. It logs attributes of an Alarm and stores them locally to the database.
 * The Alarm entity is linked to the Location entity by LocationId, as each alarm will have a starting
 * and ending address associated with it.
 * The Alarm primary key is an auto-generated ID of type long.
 */
@Entity(
    foreignKeys = {@ForeignKey(
        entity = Location.class,
        parentColumns = "location_id",
        childColumns = "start_location_id",
        onDelete = ForeignKey.SET_NULL
    ),
        @ForeignKey(
            entity = Location.class,
            parentColumns = "location_id",
            childColumns = "end_location_id",
            onDelete = ForeignKey.SET_NULL
        )
    }
)

public class Alarm {

  @PrimaryKey(autoGenerate = true)
  @ColumnInfo(name = "alarm_id")
  private long id;

  @NonNull
  @ColumnInfo(collate = ColumnInfo.NOCASE)
  private String name = "";

  @ColumnInfo(name = "is_set")
  private boolean isSet;

  @ColumnInfo(name = "arrival_time")
  private int arriveBy;

  @ColumnInfo(name = "alert_buffer")
  private int buffer = 0;

  @ColumnInfo(name = "start_location_id", index = true)
  private Long startLocationId;

  @ColumnInfo(name = "end_location_id", index = true)
  private Long endLocationId;


  /**
   *
   * @returns the autogenerated Id of an alarm
   */
  public long getId() {
    return id;
  }

  /**
   * Sets an id to a specific alarm id when provided a
   * @param id
   */
  public void setId(long id) {
    this.id = id;
  }

  /**
   *
   * @returns the String name of an alarm - e.g. Work or Class
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the String name of an alarm when provided a
   * @param name
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Boolean value referring to whether or not an alarm is set.
   * @returns true if the alarm is set.
   */
  public boolean isSet() {
    return isSet;
  }

  /**
   * Sets the value for the boolean isSet to true or false respectively
   * @param set
   */
  public void setSet(boolean set) {
    isSet = set;
  }

  /** ArriveBy refers to the time in minutes of the day that the User would like to arrive at their endLocation
   *
   * @returns the time in minutes of the arriveBy time.
   */
  public int getArriveBy() {
    return arriveBy;
  }

  /**
   * Sets the arriveBy time when provided with a
   * @param arriveBy
   */
  public void setArriveBy(int arriveBy) {
    this.arriveBy = arriveBy;
  }

  /**
   * Buffer refers to the amount of time in minutes between when the alarm goes off and the suggested
   * leaveBy time in order for the User to reach their endLocation by their selected arriveBy time.
   * @returns bufferTime in int minutes.
   */
  public int getBuffer() {
    return buffer;
  }

  /**
   * Sets the buffer time in int minutes when provided with a
   * @param buffer
   */
  public void setBuffer(int buffer) {
    this.buffer = buffer;
  }

  /**
   *
   * @returns the LocationId of the starting location for the specified alarm
   */
  public Long getStartLocationId() {
    return startLocationId;
  }

  /**
   * Sets the locationId of the starting location of an alarm when provided with a
   * @param startLocation
   */
  public void setStartLocationId(Long startLocation) {
    this.startLocationId = startLocation;
  }

  /**
   *
   * @returns the LocationId of the sending location for the specified alarm
   */
  public Long getEndLocationId() {
    return endLocationId;
  }

  /**
   * Sets the locationId of the ending location of an alarm when provided with a
   * @param endLocation
   */
  public void setEndLocationId(Long endLocation) {
    this.endLocationId = endLocation;
  }

  //TODO Figure out if I need these overrides.
  /*
  @Override
  public int hashCode() {
    return name.toLowerCase().hashCode();
  }

  @Override
  public boolean equals(@Nullable Object obj) {
    return super.equals(obj);
  }

  @NonNull
  @Override
  public String toString() {
    return super.toString();
  }

   */
}
